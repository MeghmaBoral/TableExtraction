from docling.document_converter import DocumentConverter
import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import re

# PDF path
pdf_path = "C:\\Users\\KIIT0001\\Downloads\\ifrs-2024-example-financial-statements (1).pdf"

# Convert PDF
converter = DocumentConverter()
result = converter.convert(pdf_path)

# Extract tables
dfs = []
for i, table in enumerate(result.document.tables):
    rows = list(table.data)
    if len(rows) < 2:
        continue
    try:
        dfs.append(pd.DataFrame(rows[1:], columns=rows[0]))
    except Exception as e:
        print(f"Skipped table {i} due to malformed headers: {e}")

if not dfs:
    raise SystemExit("No valid tables found in PDF.")

# Semantic search
table_texts = [df.to_markdown(index=False) for df in dfs]
model = SentenceTransformer("all-MiniLM-L6-v2")
vecs = model.encode(table_texts)
query_vec = model.encode(["statement of profit or loss"])
best_idx = cosine_similarity([query_vec[0]], vecs).argmax()
matched = dfs[best_idx]

print("\nFound table:\n")
print(matched.to_markdown(index=False), "\n")

# Clean currency/number string
def clean_amount(cell):
    s = re.sub(r"[^\d\.\-]", "", str(cell))
    try:
        return float(s) if s and re.search(r"\d", s) else 0.0
    except ValueError:
        return 0.0

# Estimate totals
totals = {"revenue": 0.0, "expense": 0.0, "profit": 0.0}
for _, row in matched.iterrows():
    text = " ".join(str(x).lower() for x in row)
    amount = 0.0
    for x in row:
        amt = clean_amount(x)
        if amt != 0.0:
            amount = amt
            break

    if "revenue" in text or "income" in text:
        totals["revenue"] += amount
    elif "cost" in text or "expense" in text or "expenditure" in text:
        totals["expense"] += amount
    elif "profit" in text or "loss" in text:
        totals["profit"] += amount

print("Estimated Totals:")
print(f"  Total Revenue    : {totals['revenue']:,.2f}")
print(f"  Total Expenditure: {totals['expense']:,.2f}")
print(f"  Total Profit/Loss: {totals['profit']:,.2f}")
